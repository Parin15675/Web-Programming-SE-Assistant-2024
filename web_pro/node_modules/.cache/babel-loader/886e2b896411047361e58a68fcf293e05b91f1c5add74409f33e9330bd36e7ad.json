{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\Documents\\\\GitHub\\\\Web_pro_2024\\\\web_pro\\\\src\\\\components\\\\Course\\\\Course_2.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Nav from '../Nav';\nimport { useSelector } from 'react-redux';\nimport { Line } from 'react-chartjs-2'; // We will use Line chart for both datasets\nimport 'chart.js/auto'; // Import Chart.js\nimport \"./Course_2.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Course_2() {\n  _s();\n  const [year, setYear] = useState(1);\n  const [curriculum, setCurriculum] = useState(null);\n  const [isReturningUser, setIsReturningUser] = useState(false);\n  const [selectedSubject, setSelectedSubject] = useState(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [grades, setGrades] = useState({});\n  const [career, setCareer] = useState(''); // Hold the career from backend\n  const [careerImportance, setCareerImportance] = useState({});\n  const [totalGradeRequired, setTotalGradeRequired] = useState(0); // Hold the total grade requirement\n  const [requiredGrade, setRequiredGrade] = useState(0); // Predicted grade for remaining subjects\n\n  const profile = useSelector(state => state.profile);\n  useEffect(() => {\n    if (profile && profile.email) {\n      axios.get(`http://localhost:8000/api/user/${encodeURIComponent(profile.email)}`).then(res => {\n        setCurriculum(res.data.curriculum);\n        setYear(res.data.user.year);\n        setCareer(res.data.user.career || \"No career selected\");\n        setIsReturningUser(true);\n        if (res.data.user && res.data.user.grades) {\n          const updatedGrades = {};\n          res.data.curriculum.subjects.forEach(subject => {\n            updatedGrades[subject.name] = res.data.user.grades[subject.name] || 0;\n          });\n          setGrades(updatedGrades);\n        }\n        setIsLoading(false);\n      }).catch(err => {\n        console.error('Error fetching user data:', err);\n        setIsReturningUser(false);\n        setIsLoading(false);\n      });\n    } else {\n      setIsLoading(false);\n    }\n  }, [profile]);\n\n  // Predefined importance levels based on career\n  useEffect(() => {\n    const careerImportanceLevels = {\n      \"Data Analysis\": {\n        \"Math 101\": 4,\n        \"Physics 101\": 3,\n        \"Programming 101\": 5\n      },\n      \"Software Engineer\": {\n        \"Math 101\": 3,\n        \"Physics 101\": 2,\n        \"Programming 101\": 5\n      },\n      \"Web Development\": {\n        \"Math 101\": 2,\n        \"Physics 101\": 1,\n        \"Programming 101\": 5\n      },\n      \"Other\": {\n        \"Math 101\": 3,\n        \"Physics 101\": 3,\n        \"Programming 101\": 3\n      }\n    };\n    setCareerImportance(careerImportanceLevels[career] || {});\n  }, [career]);\n\n  // Career total grade requirement\n  useEffect(() => {\n    const careerGradesRequired = {\n      \"Software Engineer\": 3.89,\n      \"Data Analysis\": 3.45,\n      \"Web Development\": 3.67\n    };\n    setTotalGradeRequired(careerGradesRequired[career] || 0);\n  }, [career]);\n  const handleSubjectClick = subject => {\n    if (selectedSubject === subject) {\n      setShowPopup(false);\n      setSelectedSubject(null);\n    } else {\n      setSelectedSubject(subject);\n      setShowPopup(true);\n    }\n  };\n  const handleClosePopup = () => {\n    setShowPopup(false);\n    setSelectedSubject(null);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!profile || !profile.name || !profile.email || !year || !career) {\n      console.error(\"Missing profile, email, year or career information\");\n      return;\n    }\n    const userData = {\n      name: profile.name,\n      gmail: profile.email,\n      year,\n      career\n    };\n    axios.post('http://localhost:8000/api/user/', userData).then(res => {\n      setCurriculum(res.data.curriculum);\n      setIsReturningUser(true);\n    }).catch(err => {\n      console.error('Error:', err);\n    });\n  };\n\n  // Handle grade input changes\n  const handleGradeInput = (event, subjectName) => {\n    const newGrade = parseFloat(event.target.value);\n    if (!isNaN(newGrade) && newGrade >= 0 && newGrade <= 4) {\n      setGrades({\n        ...grades,\n        [subjectName]: newGrade\n      });\n    } else if (event.target.value === '') {\n      // Allow clearing the input\n      setGrades({\n        ...grades,\n        [subjectName]: ''\n      });\n    }\n  };\n\n  // Calculate required grade for remaining subjects\n  const calculateRequiredGrade = () => {\n    if (!curriculum || !careerImportance || totalGradeRequired === 0) return 0;\n    let totalGiven = 0;\n    let givenSubjectsCount = 0;\n    curriculum.subjects.forEach(subject => {\n      const given = parseFloat(grades[subject.name]);\n      if (!isNaN(given)) {\n        totalGiven += given;\n        givenSubjectsCount++;\n      }\n    });\n    const remainingSubjectsCount = curriculum.subjects.length - givenSubjectsCount;\n    if (remainingSubjectsCount > 0) {\n      const totalGradeNeeded = totalGradeRequired * curriculum.subjects.length;\n      const remainingGradeNeeded = totalGradeNeeded - totalGiven;\n\n      // Calculate the average grade needed for remaining subjects\n      const averageRemainingGradeNeeded = remainingGradeNeeded / remainingSubjectsCount;\n      return averageRemainingGradeNeeded > 4 ? \"Impossible\" : averageRemainingGradeNeeded;\n    } else {\n      return 0; // All grades are filled\n    }\n  };\n  useEffect(() => {\n    const requiredGrade = calculateRequiredGrade();\n    setRequiredGrade(requiredGrade); // Update the state with the computed grade\n  }, [grades, curriculum, careerImportance, totalGradeRequired]);\n\n  // Generate data for the Line Chart (combined graph)\n  const generateCombinedChartData = () => {\n    if (!curriculum || !careerImportance) return null;\n    const labels = curriculum.subjects.map(subject => subject.name);\n    const userGradesData = labels.map(subjectName => grades[subjectName] || 0); // User's input grades\n    const careerImportanceData = labels.map(subjectName => careerImportance[subjectName] || 0); // Career importance\n\n    return {\n      labels,\n      datasets: [{\n        label: 'User Grades',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        data: userGradesData\n      }, {\n        label: `${career} Career Importance`,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(153,102,255,0.4)',\n        borderColor: 'rgba(153,102,255,1)',\n        data: careerImportanceData\n      }]\n    };\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register and Get Curriculum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), profile && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name: \", profile.name, \" (\", profile.email, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this), isReturningUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Year: \", year, \", Career Interest: \", career]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Year:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: year,\n              onChange: e => setYear(Number(e.target.value)),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: 1,\n                children: \"Year 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 2,\n                children: \"Year 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 3,\n                children: \"Year 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: 4,\n                children: \"Year 4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Select Career Interest:\", /*#__PURE__*/_jsxDEV(\"select\", {\n              value: career,\n              onChange: e => setCareer(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a Career\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Data Analysis\",\n                children: \"Data Analysis\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Software Engineer\",\n                children: \"Software Engineer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Web Development\",\n                children: \"Web Development\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Other\",\n                children: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true), curriculum && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"subject-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Curriculum for Year \", curriculum.year]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"subject-container\",\n            children: curriculum.subjects && curriculum.subjects.map((subject, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"subject-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"subject-box\",\n                onClick: () => handleSubjectClick(subject),\n                style: {\n                  cursor: 'pointer'\n                },\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: subject.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: grades[subject.name] || '',\n                  onChange: event => handleGradeInput(event, subject.name),\n                  min: \"0\",\n                  max: \"4\",\n                  step: \"0.01\",\n                  placeholder: \"Enter grade\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), selectedSubject && showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: selectedSubject.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Description: \", selectedSubject.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleClosePopup,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"User Grades vs \", career, \" Importance\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this), generateCombinedChartData() && /*#__PURE__*/_jsxDEV(Line, {\n            data: generateCombinedChartData(),\n            options: {\n              scales: {\n                y: {\n                  beginAtZero: true,\n                  max: 5 // Max grade is 4, but chart can go slightly above for visual clarity\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this), requiredGrade === \"Impossible\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                color: 'red'\n              },\n              children: [\"It is impossible to achieve the required grade for \", career]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this) : requiredGrade > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Required Grade for \", Object.keys(grades).find(subject => isNaN(parseFloat(grades[subject]))), \": \", requiredGrade.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Total Grade Required for \", career, \": \", totalGradeRequired]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Course_2, \"yhtLwNyUDV2TEdN35cEXr2Pv8Z8=\", false, function () {\n  return [useSelector];\n});\n_c = Course_2;\nexport default Course_2;\nvar _c;\n$RefreshReg$(_c, \"Course_2\");","map":{"version":3,"names":["React","useState","useEffect","axios","Nav","useSelector","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","Course_2","_s","year","setYear","curriculum","setCurriculum","isReturningUser","setIsReturningUser","selectedSubject","setSelectedSubject","showPopup","setShowPopup","isLoading","setIsLoading","grades","setGrades","career","setCareer","careerImportance","setCareerImportance","totalGradeRequired","setTotalGradeRequired","requiredGrade","setRequiredGrade","profile","state","email","get","encodeURIComponent","then","res","data","user","updatedGrades","subjects","forEach","subject","name","catch","err","console","error","careerImportanceLevels","careerGradesRequired","handleSubjectClick","handleClosePopup","handleSubmit","e","preventDefault","userData","gmail","post","handleGradeInput","event","subjectName","newGrade","parseFloat","target","value","isNaN","calculateRequiredGrade","totalGiven","givenSubjectsCount","given","remainingSubjectsCount","length","totalGradeNeeded","remainingGradeNeeded","averageRemainingGradeNeeded","generateCombinedChartData","labels","map","userGradesData","careerImportanceData","datasets","label","fill","lineTension","backgroundColor","borderColor","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","Number","onClick","index","style","cursor","type","min","max","step","placeholder","description","options","scales","y","beginAtZero","color","Object","keys","find","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/Web_pro_2024/web_pro/src/components/Course/Course_2.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Nav from '../Nav';\r\nimport { useSelector } from 'react-redux';\r\nimport { Line } from 'react-chartjs-2';  // We will use Line chart for both datasets\r\nimport 'chart.js/auto'; // Import Chart.js\r\nimport \"./Course_2.css\";\r\n\r\nfunction Course_2() {\r\n  const [year, setYear] = useState(1);\r\n  const [curriculum, setCurriculum] = useState(null);\r\n  const [isReturningUser, setIsReturningUser] = useState(false);\r\n  const [selectedSubject, setSelectedSubject] = useState(null);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [grades, setGrades] = useState({});\r\n  const [career, setCareer] = useState('');  // Hold the career from backend\r\n  const [careerImportance, setCareerImportance] = useState({});\r\n  const [totalGradeRequired, setTotalGradeRequired] = useState(0); // Hold the total grade requirement\r\n  const [requiredGrade, setRequiredGrade] = useState(0);  // Predicted grade for remaining subjects\r\n\r\n  const profile = useSelector(state => state.profile);\r\n  \r\n  useEffect(() => {\r\n    if (profile && profile.email) {\r\n      axios.get(`http://localhost:8000/api/user/${encodeURIComponent(profile.email)}`)\r\n        .then(res => {\r\n          setCurriculum(res.data.curriculum);\r\n          setYear(res.data.user.year);\r\n          setCareer(res.data.user.career || \"No career selected\");\r\n          setIsReturningUser(true);\r\n\r\n          if (res.data.user && res.data.user.grades) {\r\n            const updatedGrades = {};\r\n            res.data.curriculum.subjects.forEach((subject) => {\r\n              updatedGrades[subject.name] = res.data.user.grades[subject.name] || 0;\r\n            });\r\n            setGrades(updatedGrades);\r\n          }\r\n          setIsLoading(false);\r\n        })\r\n        .catch(err => {\r\n          console.error('Error fetching user data:', err);\r\n          setIsReturningUser(false);\r\n          setIsLoading(false);\r\n        });\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [profile]);\r\n\r\n  // Predefined importance levels based on career\r\n  useEffect(() => {\r\n    const careerImportanceLevels = {\r\n      \"Data Analysis\": {\r\n        \"Math 101\": 4,\r\n        \"Physics 101\": 3,\r\n        \"Programming 101\": 5,\r\n      },\r\n      \"Software Engineer\": {\r\n        \"Math 101\": 3,\r\n        \"Physics 101\": 2,\r\n        \"Programming 101\": 5,\r\n      },\r\n      \"Web Development\": {\r\n        \"Math 101\": 2,\r\n        \"Physics 101\": 1,\r\n        \"Programming 101\": 5,\r\n      },\r\n      \"Other\": {\r\n        \"Math 101\": 3,\r\n        \"Physics 101\": 3,\r\n        \"Programming 101\": 3,\r\n      }\r\n    };\r\n\r\n    setCareerImportance(careerImportanceLevels[career] || {});\r\n  }, [career]);\r\n\r\n  // Career total grade requirement\r\n  useEffect(() => {\r\n    const careerGradesRequired = {\r\n      \"Software Engineer\": 3.89,\r\n      \"Data Analysis\": 3.45,\r\n      \"Web Development\": 3.67\r\n    };\r\n\r\n    setTotalGradeRequired(careerGradesRequired[career] || 0);\r\n  }, [career]);\r\n\r\n  const handleSubjectClick = (subject) => {\r\n    if (selectedSubject === subject) {\r\n      setShowPopup(false);\r\n      setSelectedSubject(null);\r\n    } else {\r\n      setSelectedSubject(subject);\r\n      setShowPopup(true);\r\n    }\r\n  };\r\n\r\n  const handleClosePopup = () => {\r\n    setShowPopup(false);\r\n    setSelectedSubject(null);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!profile || !profile.name || !profile.email || !year || !career) {\r\n      console.error(\"Missing profile, email, year or career information\");\r\n      return;\r\n    }\r\n\r\n    const userData = {\r\n      name: profile.name,\r\n      gmail: profile.email,\r\n      year,\r\n      career,\r\n    };\r\n\r\n    axios.post('http://localhost:8000/api/user/', userData)\r\n      .then(res => {\r\n        setCurriculum(res.data.curriculum);\r\n        setIsReturningUser(true);\r\n      })\r\n      .catch(err => {\r\n        console.error('Error:', err);\r\n      });\r\n  };\r\n\r\n  // Handle grade input changes\r\n  const handleGradeInput = (event, subjectName) => {\r\n    const newGrade = parseFloat(event.target.value);\r\n    if (!isNaN(newGrade) && newGrade >= 0 && newGrade <= 4) {\r\n      setGrades({ ...grades, [subjectName]: newGrade });\r\n    } else if (event.target.value === '') {\r\n      // Allow clearing the input\r\n      setGrades({ ...grades, [subjectName]: '' });\r\n    }\r\n  };\r\n\r\n  // Calculate required grade for remaining subjects\r\n  const calculateRequiredGrade = () => {\r\n    if (!curriculum || !careerImportance || totalGradeRequired === 0) return 0;\r\n\r\n    let totalGiven = 0;\r\n    let givenSubjectsCount = 0;\r\n\r\n    curriculum.subjects.forEach((subject) => {\r\n      const given = parseFloat(grades[subject.name]);\r\n\r\n      if (!isNaN(given)) {\r\n        totalGiven += given;\r\n        givenSubjectsCount++;\r\n      }\r\n    });\r\n\r\n    const remainingSubjectsCount = curriculum.subjects.length - givenSubjectsCount;\r\n    \r\n    if (remainingSubjectsCount > 0) {\r\n      const totalGradeNeeded = totalGradeRequired * curriculum.subjects.length;\r\n      const remainingGradeNeeded = totalGradeNeeded - totalGiven;\r\n\r\n      // Calculate the average grade needed for remaining subjects\r\n      const averageRemainingGradeNeeded = remainingGradeNeeded / remainingSubjectsCount;\r\n\r\n      return averageRemainingGradeNeeded > 4 ? \"Impossible\" : averageRemainingGradeNeeded;\r\n    } else {\r\n      return 0; // All grades are filled\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const requiredGrade = calculateRequiredGrade();\r\n    setRequiredGrade(requiredGrade);  // Update the state with the computed grade\r\n  }, [grades, curriculum, careerImportance, totalGradeRequired]);\r\n\r\n  // Generate data for the Line Chart (combined graph)\r\n  const generateCombinedChartData = () => {\r\n    if (!curriculum || !careerImportance) return null;\r\n\r\n    const labels = curriculum.subjects.map(subject => subject.name);\r\n    const userGradesData = labels.map(subjectName => grades[subjectName] || 0);  // User's input grades\r\n    const careerImportanceData = labels.map(subjectName => careerImportance[subjectName] || 0);  // Career importance\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'User Grades',\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          data: userGradesData\r\n        },\r\n        {\r\n          label: `${career} Career Importance`,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: 'rgba(153,102,255,0.4)',\r\n          borderColor: 'rgba(153,102,255,1)',\r\n          data: careerImportanceData\r\n        }\r\n      ]\r\n    };\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Nav />\r\n      <div className=\"App\">\r\n        <h1>Register and Get Curriculum</h1>\r\n\r\n        {profile && (\r\n          <>\r\n            <label>\r\n              Name: {profile.name} ({profile.email})\r\n            </label>\r\n\r\n            {isReturningUser ? (\r\n              <>\r\n                <p>Year: {year}, Career Interest: {career}</p>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <label>\r\n                  Select Year:\r\n                  <select value={year} onChange={(e) => setYear(Number(e.target.value))}>\r\n                    <option value={1}>Year 1</option>\r\n                    <option value={2}>Year 2</option>\r\n                    <option value={3}>Year 3</option>\r\n                    <option value={4}>Year 4</option>\r\n                  </select>\r\n                </label>\r\n\r\n                <label>\r\n                  Select Career Interest:\r\n                  <select value={career} onChange={(e) => setCareer(e.target.value)}>\r\n                    <option value=\"\">Select a Career</option>\r\n                    <option value=\"Data Analysis\">Data Analysis</option>\r\n                    <option value=\"Software Engineer\">Software Engineer</option>\r\n                    <option value=\"Web Development\">Web Development</option>\r\n                    <option value=\"Other\">Other</option>\r\n                  </select>\r\n                </label>\r\n\r\n                <button onClick={handleSubmit}>\r\n                  Submit\r\n                </button>\r\n              </>\r\n            )}\r\n          </>\r\n        )}\r\n\r\n        {curriculum && (\r\n          <div className=\"content-container\">\r\n            <div className=\"subject-list\">\r\n              <h2>Curriculum for Year {curriculum.year}</h2>\r\n              <div className=\"subject-container\">\r\n                {curriculum.subjects && curriculum.subjects.map((subject, index) => (\r\n                  <div key={index} className=\"subject-wrapper\">\r\n                    <div\r\n                      className=\"subject-box\"\r\n                      onClick={() => handleSubjectClick(subject)}\r\n                      style={{ cursor: 'pointer' }}\r\n                    >\r\n                      <h3>{subject.name}</h3>\r\n                    </div>\r\n\r\n                    {/* Grade input */}\r\n                    <div>\r\n                      <input\r\n                        type=\"number\"\r\n                        value={grades[subject.name] || ''}\r\n                        onChange={(event) => handleGradeInput(event, subject.name)}\r\n                        min=\"0\"\r\n                        max=\"4\"\r\n                        step=\"0.01\"\r\n                        placeholder=\"Enter grade\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {selectedSubject && showPopup && (\r\n              <div className=\"popup\">\r\n                <h2>{selectedSubject.name}</h2>\r\n                <p>Description: {selectedSubject.description}</p>\r\n                <button onClick={handleClosePopup}>Close</button>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"chart-container\">\r\n              <h2>User Grades vs {career} Importance</h2>\r\n              {generateCombinedChartData() && (\r\n                <Line\r\n                  data={generateCombinedChartData()}\r\n                  options={{\r\n                    scales: {\r\n                      y: {\r\n                        beginAtZero: true,\r\n                        max: 5 // Max grade is 4, but chart can go slightly above for visual clarity\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n              )}\r\n\r\n              {/* Show required grade or impossibility message */}\r\n              {requiredGrade === \"Impossible\" ? (\r\n                <div>\r\n                  <h3 style={{ color: 'red' }}>It is impossible to achieve the required grade for {career}</h3>\r\n                </div>\r\n              ) : (\r\n                requiredGrade > 0 && (\r\n                  <div>\r\n                    <h3>Required Grade for {Object.keys(grades).find(subject => isNaN(parseFloat(grades[subject])))}: {requiredGrade.toFixed(2)}</h3>\r\n                  </div>\r\n                )\r\n              )}\r\n\r\n              {/* Show the total grade required for the career */}\r\n              <div>\r\n                <h3>Total Grade Required for {career}: {totalGradeRequired}</h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Course_2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}